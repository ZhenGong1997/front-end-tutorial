{"mappings":"AAAA,OAAO,IAAI,OAAO,SAAS,SAAS,eAAe;IAC/C,IAAI;IACJ,KAAK;IACL,IAAG,OAAO,oBAAqB,UAC3B,WAAW,SAAS,iBAAiB;SAClC,IAAG,2BAA2B,OACjC,WAAW;IAGf,8BAA8B;IAC9B,mBAAmB;IACnB,wBAAwB;IACxB,OAAO;QACH,oCAAoC;QACpC,QAAO,gBAAgB;QACvB,4BAA4B;QAC5B,UAAS,SAAS;YACd,yBAAyB;YACzB,IAAK,IAAI,IAAE,GAAG,IAAE,SAAS,QAAQ,IAC7B,QAAQ,CAAC,EAAE,CAAC,UAAU,IAAI;YAE9B,OAAO;YACP,OAAO,IAAI;QACf;QAEA,MAAM,QAAQ;YACV,IAAI,QAAQ,EAAE;YACd,IAAI,IAAI,IAAI,GAAG,IAAI,SAAS,QAAQ,IAAI;gBACpC,MAAM,YAAY,MAAM,KAAK,QAAQ,CAAC,EAAE,CAAC,iBAAiB;gBAC1D,QAAQ,MAAM,OAAO;YACrB,4EAA4E;YAChF;YACA,oDAAoD;YACpD,MAAM,SAAS,IAAI;YAEnB,8BAA8B;YAC9B,OAAO,OAAO;QAClB;QAEA;YACI,OAAO,IAAI,CAAC;QAChB;QAEA,MAAK,EAAE;YACH,IAAI,IAAI,IAAE,GAAG,IAAE,SAAS,QAAQ,IAC5B,GAAG,KAAK,MAAM,QAAQ,CAAC,EAAE,EAAE;YAE/B,OAAO,IAAI;QACf;QAEA,OAAO;QACP;YACI,MAAM,QAAQ,EAAE;YAChB,IAAI,CAAC,KAAK,CAAC;gBACP,4CAA4C;gBAC5C,IAAG,MAAM,QAAQ,KAAK,gBAAgB,IAClC,MAAM,KAAK,KAAK;YAExB;YACA,OAAO,OAAO;QAClB;QAEA;YACI,MAAM,QAAQ,EAAE;YAChB,IAAI,CAAC,KAAK,CAAC;gBACP,0CAA0C;gBAC1C,MAAM,QAAQ,KAAK;YACvB;YACA,OAAO,OAAO;QAClB;QACA;YACI,QAAQ,IAAI;QAChB;QAEA;YACI,MAAM,QAAQ,EAAE;YAChB,IAAI,CAAC,KAAK,CAAC;gBACP,MAAM,KAAK,KAAK;YACpB;YACA,OAAO,OAAO;QAClB;QAEA;YACI,MAAM,QAAQ,EAAE;YAChB,IAAI,CAAC,KAAK,CAAC;gBACP,MAAM,KAAK,KAAK;YACpB;YACA,OAAO,OAAO;QAClB;QAEA;YACI,MAAM,aAAW,EAAE;YACnB,IAAI,CAAC,KAAK,CAAC;gBACP,MAAM,WAAW,MAAM,KAAK,KAAK,WAAW;gBAC5C,WAAW,KAAK,SAAS,QAAQ;YACrC;YACA,OAAO;QACX;IACJ;AACJ","sources":["src/jquery.js"],"sourcesContent":["window.$ = window.jQuery = function(selectorOrArray){\n    let elements;\n    // 重载\n    if(typeof(selectorOrArray) === 'string'){\n        elements = document.querySelectorAll(selectorOrArray);\n    } else if(selectorOrArray instanceof Array){\n        elements = selectorOrArray;\n    }\n    \n    // jquery精髓：利用闭包，用函数维持elements\n    // 核心操作：1.闭包 2.链式操作\n    // return可以操作elements的对象\n    return {\n        // 需要把find中之前的array上的oldApi复制到api对象上\n        oldApi:selectorOrArray.oldApi,\n        // 闭包，addClass访问外部变量elements\n        addClass(className){\n            // 给elements中的所有class添加名字\n            for (let i=0; i<elements.length; i++){\n                elements[i].classList.add(className);\n            }\n            // 链式技巧\n            return this;\n        },\n\n        find (selector){\n            let array = [];\n            for(let i = 0; i < elements.length; i++){\n                const elements2 = Array.from(elements[i].querySelectorAll(selector));\n                array = array.concat(elements2);\n                // array = array.concat(Array.from(elements[i].querySelectorAll(selector)));\n            }\n            // JS中数组是对象，对象可以添加属性，这样我们在oldApi记住了parent，方便back函数溯回\n            array.oldApi = this;\n\n            // 此接口为了链式新的对象，防止操作的是共用element\n            return jQuery(array);\n        },\n\n        back(){\n            return this.oldApi;\n        },\n\n        each(fn){\n            for(let i=0; i<elements.length; i++){\n                fn.call(null, elements[i], i);\n            }\n            return this;\n        },\n\n        // 返回当前\n        parent(){\n            const array = [];\n            this.each((node) => {\n                // 注意不能用in，JS的in只查询key，不查询value，一维数组的key是隐藏的\n                if(array.indexOf(node.parentNode) === -1){\n                    array.push(node.parentNode);\n                }\n            })\n            return jQuery(array);\n        },\n\n        children(){\n            const array = [];\n            this.each((node) => {\n                // ...是展开操作符，把数组里的内容平铺，防止里面是HTMLCollection\n                array.push(...node.children);\n            })\n            return jQuery(array);\n        },\n        print(){\n            console.log(elements);\n        },\n\n        next(){\n            const array = [];\n            this.each((node)=>{\n                array.push(node.nextElementSibling);\n            })\n            return jQuery(array);\n        },\n\n        prev (){\n            const array = [];\n            this.each((node)=>{\n                array.push(node.previousElementSibling);\n            })\n            return jQuery(array);\n        },\n\n        index(){\n            const arrayIndex=[];\n            this.each((node)=>{\n                const nodeList = Array.from(node.parentNode.children);\n                arrayIndex.push(nodeList.indexOf(node));\n            })\n            return arrayIndex;\n        }\n    }\n}\n\n\n"],"names":[],"version":3,"file":"index.3e2f9b55.js.map","sourceRoot":"/__parcel_source_root/"}