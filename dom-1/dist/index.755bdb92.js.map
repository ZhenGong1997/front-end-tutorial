{"mappings":"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","sources":["src/dom.js"],"sourcesContent":["window.dom = {\n\n    /* 增--------------------------------*/\n    // 创建一个新的元素\n    create(string){\n        //template 内部可以容纳其他任意标签，div不行，所以我们使用template帮助创建\n        const container = document.createElement(\"template\");\n        //去掉传入string前后的空格\n        container.innerHTML = string.trim()\n        // container.content是一个document-fragment\n        return container.content.firstChild;\n    },\n\n    // 在某节点之后增加一个“弟弟”节点\n    after(newNode, node){\n        // JS只提供Node.insertBefore,转换思想，当前节点之后相当于下一个节点之前\n        // 若下一节点为null，并不会报错，而是自动加入当前节点之后\n        node.parentNode.insertBefore(newNode, node.nextSibling);\n    },\n    // 在某节点之前增加一个“哥哥”节点\n    before(newNode, node){\n        node.parentNode.insertBefore(newNode, node);\n    },\n\n    // 增加一个子节点\n    append(node, parent){\n        parent.appendChild(node);\n    },\n\n    // 增加一个父节点\n    wrap(node, newNode){\n        // 把新节点放在当前节点前面，再将其变成父节点\n        // 保证原父节点不会被顶替，而是将新节点插入在两层之间\n        dom.before(newNode, node);\n        dom.append(node, newNode);\n    },\n\n\n    /*删--------------------------------------*/\n    // 删除节点\n    remove(node){\n        node.parentNode.removeChild(node);\n        // 返回被删除节点作参考验证\n        return node;\n    },\n\n    // 删除改节点所有子元素\n    empty(node){\n        const childNodes = node.childNodes;\n        const array = [];\n        /* 危险！！代码错误，不可以边read边remove！！\n        for(let i=0; i<childNodes.length; i++){\n            dom.remove(childNodes[i]);\n            array.push(childNodes[i]);\n        }*/\n        while(node.firstChild){\n            array.push(dom.remove(node.firstChild));\n        }\n        // 返回被删除所有子元素节点作参考验证\n        return array;\n    },\n\n    /* 改和读-------------------------------- */\n    // 读写属性,JS允许函数传参数量小于预设,这叫做“重载” overload\n    attr(node, name, value){\n        if(arguments.length === 3){\n            node.setAttribute(name, value);\n        } else if (arguments.length === 2){\n            return node.getAttribute(name);\n        }\n    },\n\n    //读写文本内容\n    text(node, string){ //适配\n        if(arguments.length === 2){\n            if('innerText' in node){\n                node.innerText = string; //ie\n            } else {\n                node.textContent = string;// firefox, chrome\n            }\n        } else if(arguments.length === 1) {\n            if('innerText' in node){\n                return node.innerText\n            } else {\n                return node.textContent;\n            }\n        }  \n    },\n\n    //读写HTML内容\n    html(node, string){ \n        if(arguments.length === 2){\n            node.innerHTML = string;\n        } else if (argument.lenght === 1){\n            return node.innerHTML;\n        }\n    },\n\n    // 修改style\n    style(node, name, value){\n        if(arguments.length === 3){\n            //dom.style(div, 'color', 'red')\n            node.style[name] = value;\n        } else if (arguments.length === 2){\n            if(typeof name === 'string'){\n                //dom.style(div, 'color') 获取style的值\n                return node.style[name];\n            } else if (name instanceof Object) {\n                const object = name;\n                for(let key in object){\n                    //key: border /  color ...\n                    //node.style.border =...\n                    //dom.style(node, {color:'red'})\n                    node.style[key] = object[key];\n                }\n            }\n        }\n    },\n\n    // 添加class && 删除class\n    class: {\n        add(node, className){\n            node.classList.add(className);\n        },\n        remove(node, className){\n            node.classList.remove(className);\n        },\n        has(node, className){\n            return node.classList.contains(className);\n        }\n    },\n\n    // 添加事件监听\n    on(node, eventName, fn){\n        node.addEventListener(eventName, fn);\n    },\n    // 删除事件监听\n    off(node, eventName, fn){\n        node.removeEventListener(eventName, fn);\n    },\n\n    /* 查--------------------------- */\n    // 查找元素\n    find(selector, scope){\n        //若有范围，则在范围内寻找选择器\n        return (scope || document).querySelectorAll(selector); \n    },\n\n    // 查找父元素\n    parent(node){\n        return node.parentNode;\n    },\n\n    // 查找子元素\n    children(node){\n        return node.children;\n    },\n\n    // 查找兄弟姐妹元素\n    siblings(node){\n        // node.children得到的是伪数组，需要先用转成数组，再用filter除掉自己\n        return Array.from(node.parentNode.children).filter(n => n!== node);\n    },\n\n    // 查找下一个同阶元素\n    next(node){\n        let curNode = node.nextSibling;\n        // 存在,略过text文本内容（回车）\n        while(curNode && curNode.nodeType === 3){\n            curNode = curNode.nextSibling;\n        }\n        return curNode;\n        // return node.nextElementSibling;\n    },\n\n    // 查找上一个同阶元素\n    previous(node){\n        let curNode = node.previousSibling;\n        while(curNode && curNode.nodeType === 3){\n            curNode = curNode.previousSibling;\n        }\n        return curNode;\n        // return node.previousElementSibling;\n    },\n\n    // 遍历一层nodeList，每个node执行函数\n    each(nodeList, fn){\n        for(let i=0; i<nodeList.length; i++){\n            fn.call(null,nodeList[i]);\n        }\n    },\n    \n    // 查找当前节点在同阶的位置\n    index(node){\n        const nodeList = Array.from(dom.children(node.parentNode));\n        return nodeList.indexOf(node);\n    }\n};\n\n"],"names":[],"version":3,"file":"index.755bdb92.js.map","sourceRoot":"/__parcel_source_root/"}